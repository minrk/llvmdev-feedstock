From f8415f2eb094864e8983eae76691ae4d769664d4 Mon Sep 17 00:00:00 2001
From: Axel Naumann <Axel.Naumann@cern.ch>
Date: Mon, 26 Aug 2013 11:35:57 +0200
Subject: [PATCH 1/9] Add interface to create DyLib from dlopen handle.

---
 include/llvm/Support/DynamicLibrary.h  |  2 ++
 lib/Support/DynamicLibrary.cpp         |  3 +++
 lib/Support/Windows/DynamicLibrary.inc | 13 +++++++++++++
 3 files changed, 18 insertions(+)

diff --git a/include/llvm/Support/DynamicLibrary.h b/include/llvm/Support/DynamicLibrary.h
index a7d2221..cbe799e 100644
--- a/include/llvm/Support/DynamicLibrary.h
+++ b/include/llvm/Support/DynamicLibrary.h
@@ -68,6 +68,8 @@ namespace sys {
     static DynamicLibrary getPermanentLibrary(const char *filename,
                                               std::string *errMsg = nullptr);
 
+    static DynamicLibrary addPermanentLibrary(void *handle);
+
     /// This function permanently loads the dynamic library at the given path.
     /// Use this instead of getPermanentLibrary() when you won't need to get
     /// symbols from the library itself.
diff --git a/lib/Support/DynamicLibrary.cpp b/lib/Support/DynamicLibrary.cpp
index ced21e4..3b418f3 100644
--- a/lib/Support/DynamicLibrary.cpp
+++ b/lib/Support/DynamicLibrary.cpp
@@ -69,7 +69,10 @@ DynamicLibrary DynamicLibrary::getPermanentLibrary(const char *filename,
   if (!filename)
     handle = RTLD_DEFAULT;
 #endif
+  return addPermanentLibrary(handle);
+}
 
+DynamicLibrary DynamicLibrary::addPermanentLibrary(void *handle) {
   if (!OpenedHandles)
     OpenedHandles = new DenseSet<void *>();
 
diff --git a/lib/Support/Windows/DynamicLibrary.inc b/lib/Support/Windows/DynamicLibrary.inc
index 0506894..7e90e5d 100644
--- a/lib/Support/Windows/DynamicLibrary.inc
+++ b/lib/Support/Windows/DynamicLibrary.inc
@@ -179,4 +179,17 @@ void *DynamicLibrary::getAddressOfSymbol(const char *symbolName) {
   return (void *)(intptr_t)GetProcAddress((HMODULE)Data, symbolName);
 }
 
+DynamicLibrary DynamicLibrary::addPermanentLibrary(void *handle) {
+  if (OpenedHandles == 0)
+    OpenedHandles = new DenseSet<HMODULE>();
+
+  // If we've already loaded this library, dlclose() the handle in order to
+  // keep the internal refcount at +1.
+  if (!OpenedHandles->insert((const HMODULE)handle).second)
+    FreeLibrary((HMODULE)handle);
+
+  return DynamicLibrary((HMODULE)handle);
+}
+
+
 }
-- 
2.6.0

